/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.product.model.impl;

import com.liferay.commerce.product.model.CommerceCatalogLocalization;
import com.liferay.commerce.product.model.CommerceCatalogLocalizationModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CommerceCatalogLocalization service. Represents a row in the &quot;CommerceCatalogLocalization&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CommerceCatalogLocalizationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommerceCatalogLocalizationImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CommerceCatalogLocalizationImpl
 * @generated
 */
public class CommerceCatalogLocalizationModelImpl
	extends BaseModelImpl<CommerceCatalogLocalization>
	implements CommerceCatalogLocalizationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commerce catalog localization model instance should use the <code>CommerceCatalogLocalization</code> interface instead.
	 */
	public static final String TABLE_NAME = "CommerceCatalogLocalization";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT},
		{"commerceCatalogLocalizationId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"commerceCatalogId", Types.BIGINT},
		{"languageId", Types.VARCHAR}, {"descCatalog", Types.VARCHAR},
		{"subCatalog", Types.VARCHAR}, {"imageCatalog", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commerceCatalogLocalizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commerceCatalogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("languageId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descCatalog", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subCatalog", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageCatalog", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CommerceCatalogLocalization (mvccVersion LONG default 0 not null,commerceCatalogLocalizationId LONG not null primary key,companyId LONG,commerceCatalogId LONG,languageId VARCHAR(75) null,descCatalog VARCHAR(75) null,subCatalog VARCHAR(75) null,imageCatalog VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table CommerceCatalogLocalization";

	public static final String ORDER_BY_JPQL =
		" ORDER BY commerceCatalogLocalization.commerceCatalogLocalizationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CommerceCatalogLocalization.commerceCatalogLocalizationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.commerce.product.model.CommerceCatalogLocalization"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.commerce.product.model.CommerceCatalogLocalization"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.commerce.product.model.CommerceCatalogLocalization"),
		true);

	public static final long COMMERCECATALOGID_COLUMN_BITMASK = 1L;

	public static final long LANGUAGEID_COLUMN_BITMASK = 2L;

	public static final long COMMERCECATALOGLOCALIZATIONID_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.commerce.product.model.CommerceCatalogLocalization"));

	public CommerceCatalogLocalizationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commerceCatalogLocalizationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommerceCatalogLocalizationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commerceCatalogLocalizationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommerceCatalogLocalization.class;
	}

	@Override
	public String getModelClassName() {
		return CommerceCatalogLocalization.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CommerceCatalogLocalization, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CommerceCatalogLocalization, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommerceCatalogLocalization, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CommerceCatalogLocalization)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CommerceCatalogLocalization, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CommerceCatalogLocalization, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CommerceCatalogLocalization)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CommerceCatalogLocalization, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CommerceCatalogLocalization, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CommerceCatalogLocalization>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CommerceCatalogLocalization.class.getClassLoader(),
			CommerceCatalogLocalization.class, ModelWrapper.class);

		try {
			Constructor<CommerceCatalogLocalization> constructor =
				(Constructor<CommerceCatalogLocalization>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map
		<String, Function<CommerceCatalogLocalization, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<CommerceCatalogLocalization, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<CommerceCatalogLocalization, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CommerceCatalogLocalization, Object>>();
		Map<String, BiConsumer<CommerceCatalogLocalization, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<CommerceCatalogLocalization, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion",
			new Function<CommerceCatalogLocalization, Object>() {

				@Override
				public Object apply(
					CommerceCatalogLocalization commerceCatalogLocalization) {

					return commerceCatalogLocalization.getMvccVersion();
				}

			});
		attributeSetterBiConsumers.put(
			"mvccVersion",
			new BiConsumer<CommerceCatalogLocalization, Object>() {

				@Override
				public void accept(
					CommerceCatalogLocalization commerceCatalogLocalization,
					Object mvccVersionObject) {

					commerceCatalogLocalization.setMvccVersion(
						(Long)mvccVersionObject);
				}

			});
		attributeGetterFunctions.put(
			"commerceCatalogLocalizationId",
			new Function<CommerceCatalogLocalization, Object>() {

				@Override
				public Object apply(
					CommerceCatalogLocalization commerceCatalogLocalization) {

					return commerceCatalogLocalization.
						getCommerceCatalogLocalizationId();
				}

			});
		attributeSetterBiConsumers.put(
			"commerceCatalogLocalizationId",
			new BiConsumer<CommerceCatalogLocalization, Object>() {

				@Override
				public void accept(
					CommerceCatalogLocalization commerceCatalogLocalization,
					Object commerceCatalogLocalizationIdObject) {

					commerceCatalogLocalization.
						setCommerceCatalogLocalizationId(
							(Long)commerceCatalogLocalizationIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<CommerceCatalogLocalization, Object>() {

				@Override
				public Object apply(
					CommerceCatalogLocalization commerceCatalogLocalization) {

					return commerceCatalogLocalization.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<CommerceCatalogLocalization, Object>() {

				@Override
				public void accept(
					CommerceCatalogLocalization commerceCatalogLocalization,
					Object companyIdObject) {

					commerceCatalogLocalization.setCompanyId(
						(Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"commerceCatalogId",
			new Function<CommerceCatalogLocalization, Object>() {

				@Override
				public Object apply(
					CommerceCatalogLocalization commerceCatalogLocalization) {

					return commerceCatalogLocalization.getCommerceCatalogId();
				}

			});
		attributeSetterBiConsumers.put(
			"commerceCatalogId",
			new BiConsumer<CommerceCatalogLocalization, Object>() {

				@Override
				public void accept(
					CommerceCatalogLocalization commerceCatalogLocalization,
					Object commerceCatalogIdObject) {

					commerceCatalogLocalization.setCommerceCatalogId(
						(Long)commerceCatalogIdObject);
				}

			});
		attributeGetterFunctions.put(
			"languageId",
			new Function<CommerceCatalogLocalization, Object>() {

				@Override
				public Object apply(
					CommerceCatalogLocalization commerceCatalogLocalization) {

					return commerceCatalogLocalization.getLanguageId();
				}

			});
		attributeSetterBiConsumers.put(
			"languageId",
			new BiConsumer<CommerceCatalogLocalization, Object>() {

				@Override
				public void accept(
					CommerceCatalogLocalization commerceCatalogLocalization,
					Object languageIdObject) {

					commerceCatalogLocalization.setLanguageId(
						(String)languageIdObject);
				}

			});
		attributeGetterFunctions.put(
			"descCatalog",
			new Function<CommerceCatalogLocalization, Object>() {

				@Override
				public Object apply(
					CommerceCatalogLocalization commerceCatalogLocalization) {

					return commerceCatalogLocalization.getDescCatalog();
				}

			});
		attributeSetterBiConsumers.put(
			"descCatalog",
			new BiConsumer<CommerceCatalogLocalization, Object>() {

				@Override
				public void accept(
					CommerceCatalogLocalization commerceCatalogLocalization,
					Object descCatalogObject) {

					commerceCatalogLocalization.setDescCatalog(
						(String)descCatalogObject);
				}

			});
		attributeGetterFunctions.put(
			"subCatalog",
			new Function<CommerceCatalogLocalization, Object>() {

				@Override
				public Object apply(
					CommerceCatalogLocalization commerceCatalogLocalization) {

					return commerceCatalogLocalization.getSubCatalog();
				}

			});
		attributeSetterBiConsumers.put(
			"subCatalog",
			new BiConsumer<CommerceCatalogLocalization, Object>() {

				@Override
				public void accept(
					CommerceCatalogLocalization commerceCatalogLocalization,
					Object subCatalogObject) {

					commerceCatalogLocalization.setSubCatalog(
						(String)subCatalogObject);
				}

			});
		attributeGetterFunctions.put(
			"imageCatalog",
			new Function<CommerceCatalogLocalization, Object>() {

				@Override
				public Object apply(
					CommerceCatalogLocalization commerceCatalogLocalization) {

					return commerceCatalogLocalization.getImageCatalog();
				}

			});
		attributeSetterBiConsumers.put(
			"imageCatalog",
			new BiConsumer<CommerceCatalogLocalization, Object>() {

				@Override
				public void accept(
					CommerceCatalogLocalization commerceCatalogLocalization,
					Object imageCatalogObject) {

					commerceCatalogLocalization.setImageCatalog(
						(String)imageCatalogObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@Override
	public long getCommerceCatalogLocalizationId() {
		return _commerceCatalogLocalizationId;
	}

	@Override
	public void setCommerceCatalogLocalizationId(
		long commerceCatalogLocalizationId) {

		_commerceCatalogLocalizationId = commerceCatalogLocalizationId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getCommerceCatalogId() {
		return _commerceCatalogId;
	}

	@Override
	public void setCommerceCatalogId(long commerceCatalogId) {
		_columnBitmask |= COMMERCECATALOGID_COLUMN_BITMASK;

		if (!_setOriginalCommerceCatalogId) {
			_setOriginalCommerceCatalogId = true;

			_originalCommerceCatalogId = _commerceCatalogId;
		}

		_commerceCatalogId = commerceCatalogId;
	}

	public long getOriginalCommerceCatalogId() {
		return _originalCommerceCatalogId;
	}

	@Override
	public String getLanguageId() {
		if (_languageId == null) {
			return "";
		}
		else {
			return _languageId;
		}
	}

	@Override
	public void setLanguageId(String languageId) {
		_columnBitmask |= LANGUAGEID_COLUMN_BITMASK;

		if (_originalLanguageId == null) {
			_originalLanguageId = _languageId;
		}

		_languageId = languageId;
	}

	public String getOriginalLanguageId() {
		return GetterUtil.getString(_originalLanguageId);
	}

	@Override
	public String getDescCatalog() {
		if (_descCatalog == null) {
			return "";
		}
		else {
			return _descCatalog;
		}
	}

	@Override
	public void setDescCatalog(String descCatalog) {
		_descCatalog = descCatalog;
	}

	@Override
	public String getSubCatalog() {
		if (_subCatalog == null) {
			return "";
		}
		else {
			return _subCatalog;
		}
	}

	@Override
	public void setSubCatalog(String subCatalog) {
		_subCatalog = subCatalog;
	}

	@Override
	public String getImageCatalog() {
		if (_imageCatalog == null) {
			return "";
		}
		else {
			return _imageCatalog;
		}
	}

	@Override
	public void setImageCatalog(String imageCatalog) {
		_imageCatalog = imageCatalog;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CommerceCatalogLocalization.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommerceCatalogLocalization toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CommerceCatalogLocalization>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommerceCatalogLocalizationImpl commerceCatalogLocalizationImpl =
			new CommerceCatalogLocalizationImpl();

		commerceCatalogLocalizationImpl.setMvccVersion(getMvccVersion());
		commerceCatalogLocalizationImpl.setCommerceCatalogLocalizationId(
			getCommerceCatalogLocalizationId());
		commerceCatalogLocalizationImpl.setCompanyId(getCompanyId());
		commerceCatalogLocalizationImpl.setCommerceCatalogId(
			getCommerceCatalogId());
		commerceCatalogLocalizationImpl.setLanguageId(getLanguageId());
		commerceCatalogLocalizationImpl.setDescCatalog(getDescCatalog());
		commerceCatalogLocalizationImpl.setSubCatalog(getSubCatalog());
		commerceCatalogLocalizationImpl.setImageCatalog(getImageCatalog());

		commerceCatalogLocalizationImpl.resetOriginalValues();

		return commerceCatalogLocalizationImpl;
	}

	@Override
	public int compareTo(
		CommerceCatalogLocalization commerceCatalogLocalization) {

		long primaryKey = commerceCatalogLocalization.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CommerceCatalogLocalization)) {
			return false;
		}

		CommerceCatalogLocalization commerceCatalogLocalization =
			(CommerceCatalogLocalization)object;

		long primaryKey = commerceCatalogLocalization.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalCommerceCatalogId = _commerceCatalogId;

		_setOriginalCommerceCatalogId = false;

		_originalLanguageId = _languageId;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CommerceCatalogLocalization> toCacheModel() {
		CommerceCatalogLocalizationCacheModel
			commerceCatalogLocalizationCacheModel =
				new CommerceCatalogLocalizationCacheModel();

		commerceCatalogLocalizationCacheModel.mvccVersion = getMvccVersion();

		commerceCatalogLocalizationCacheModel.commerceCatalogLocalizationId =
			getCommerceCatalogLocalizationId();

		commerceCatalogLocalizationCacheModel.companyId = getCompanyId();

		commerceCatalogLocalizationCacheModel.commerceCatalogId =
			getCommerceCatalogId();

		commerceCatalogLocalizationCacheModel.languageId = getLanguageId();

		String languageId = commerceCatalogLocalizationCacheModel.languageId;

		if ((languageId != null) && (languageId.length() == 0)) {
			commerceCatalogLocalizationCacheModel.languageId = null;
		}

		commerceCatalogLocalizationCacheModel.descCatalog = getDescCatalog();

		String descCatalog = commerceCatalogLocalizationCacheModel.descCatalog;

		if ((descCatalog != null) && (descCatalog.length() == 0)) {
			commerceCatalogLocalizationCacheModel.descCatalog = null;
		}

		commerceCatalogLocalizationCacheModel.subCatalog = getSubCatalog();

		String subCatalog = commerceCatalogLocalizationCacheModel.subCatalog;

		if ((subCatalog != null) && (subCatalog.length() == 0)) {
			commerceCatalogLocalizationCacheModel.subCatalog = null;
		}

		commerceCatalogLocalizationCacheModel.imageCatalog = getImageCatalog();

		String imageCatalog =
			commerceCatalogLocalizationCacheModel.imageCatalog;

		if ((imageCatalog != null) && (imageCatalog.length() == 0)) {
			commerceCatalogLocalizationCacheModel.imageCatalog = null;
		}

		return commerceCatalogLocalizationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CommerceCatalogLocalization, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CommerceCatalogLocalization, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommerceCatalogLocalization, Object>
				attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply(
					(CommerceCatalogLocalization)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CommerceCatalogLocalization, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CommerceCatalogLocalization, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommerceCatalogLocalization, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply(
					(CommerceCatalogLocalization)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CommerceCatalogLocalization>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private long _mvccVersion;
	private long _commerceCatalogLocalizationId;
	private long _companyId;
	private long _commerceCatalogId;
	private long _originalCommerceCatalogId;
	private boolean _setOriginalCommerceCatalogId;
	private String _languageId;
	private String _originalLanguageId;
	private String _descCatalog;
	private String _subCatalog;
	private String _imageCatalog;
	private long _columnBitmask;
	private CommerceCatalogLocalization _escapedModel;

}